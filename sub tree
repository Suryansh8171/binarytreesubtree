MAX = 100

# class for a tree node
class Node:
	def __init__(self):
		self.key = ' '
		self.left = None
		self.right = None

# A utility function to create a new BST node
def newNode(item):
	temp = Node()
	temp.key = item
	return temp

# A utility function to store inorder traversal of tree rooted
# with root in an array arr[]. Note that i is passed as reference
def storeInorder(root, i):
	if (root == None):
		return '$'
	res = storeInorder(root.left, i)
	res += root.key
	res += storeInorder(root.right, i)
	return res

# A utility function to store preorder traversal of tree rooted
# with root in an array arr[]. Note that i is passed as reference
def storePreOrder(root, i):
	if (root == None):
		return '$'
	res = root.key
	res += storePreOrder(root.left, i)
	res += storePreOrder(root.right, i)
	return res

# This function returns true if S is a subtree of T, otherwise false
def isSubtree(T, S):
	# base cases
	if (S == None):
		return True
	if (T == None):
		return False

	# Store Inorder traversals of T and S in inT[0..m-1]
	# and inS[0..n-1] respectively
	m = 0
	n = 0
	inT = storeInorder(T, m)
	inS = storeInorder(S, n)

	# If inS[] is not a substring of inT[], return false
	res = True
	if inS in inT:
		res = True
	else:
		res = False
	if(res == False):
		return res

	# Store Preorder traversals of T and S in preT[0..m-1]
	# and preS[0..n-1] respectively
	m = 0
	n = 0
	preT = storePreOrder(T, m)
	preS = storePreOrder(S, n)

	# If preS[] is not a substring of preT[], return false
	# Else return true
	if preS in preT:
		return True
	else:
		return False

# Driver program to test above function
T = newNode('a')
T.left = newNode('b')
T.right = newNode('d')
T.left.left = newNode('c')
T.right.right = newNode('e')

S = newNode('a')
S.left = newNode('b')
S.left.left = newNode('c')
S.right = newNode('d')

if (isSubtree(T, S)):
	print("Yes: S is a subtree of T")
else:
	print("No: S is NOT a subtree of T")

	# This code is contributed by rj13to.
